//Space complexity: O(nlog(n))
//Time complexity: O(n log(n)^2 )
#include<bits/stdc++.h>
using namespace std;
const int N = 30000+9;
#define ll long long

vector<int>tree[4*N];
int ar[N];
void merge(int node,int left,int right){
   int i = 0, j = 0;
   while(i < tree[left].size() and j < tree[right].size()){
      if(tree[left][i] < tree[right][j]){
         tree[node].push_back(tree[left][i]);
         i++;
      }
      else{
         tree[node].push_back(tree[right][j++]);
      }
   }
   while(i < tree[left].size()){
      tree[node].push_back(tree[left][i++]);
   }
   while(j < tree[right].size()){
      tree[node].push_back(tree[right][j++]);
   }
}
void build(int node,int b,int e){
   if(b==e){
      tree[node].push_back(ar[b]);
      return;
   }
 int left = 2*node , right = 2*node+1;
 int mid = (b+e)/2;
 build(left,b,mid);
 build(right,mid+1,e);
 merge(node,left,right);
}

int query(int node,int b,int e,int l,int r,int k){
   if(b>r||e<l){
      return 0;
   }
   if(b>=l&&e<=r){
      return tree[node].size()- (int)(upper_bound(tree[node].begin(),tree[node].end(),k)-tree[node].begin());
   }
    int left = 2*node , right = 2*node+1;
    int mid = (b+e)/2;
    return query(left,b,mid,l,r,k) + query(right,mid+1,e,l,r,k);

}

void solve(){

   int n,q;
   cin >> n;
   for(int i=1;i<=n;i++)cin>>ar[i];
   build(1,1,n);

   cin >> q;
   while(q--){
      int l,r,k; cin >> l >> r >> k;

      cout << query(1,1,n,l,r,k) << '\n';

   }

}
int main(){
     ios::sync_with_stdio(false);cin.tie(0);

solve();
 return 0;
}
