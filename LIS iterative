//Given an array,find the length and the print longest increasing subsequnce (LIS)

const int inf = 1e9+7 , N = 1e3,mod=1e9+7;
int n,ar[N], dp[N] , parent[N];
void LIS(){
     cin >> n;
     for(int i = 1; i <= n; i++) cin >> ar[i];
     
     for(int i = 1; i <= n; i++){
          dp[i] = 1;parent[i] = i;
          for(int j = 1; j < i; j++){
               if(ar[j] < ar[i]){
                   if(dp[j] + 1 > dp[i]){
                    dp[i] = max(dp[i], 1+dp[j]);
                    parent[i] = j;
                   } 
               }
          }
     }
     int len = 0 , last;
     for(int i = 1; i <= n; i++) {
          if(len < dp[i])
          {
               len = max(len, dp[i]);
               last = i;
          }
     }
     cout << len << endl;
     vector<int>sequenc;
     while(parent[last] != last){
          sequenc.push_back(ar[last]);
          last = parent[last];
     }
     sequenc.push_back(ar[last]);
     for(int i = sequenc.size() - 1; i >= 0; i--) cout << sequenc[i] <<" ";

}
