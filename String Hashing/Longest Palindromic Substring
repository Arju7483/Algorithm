//Given a string of length n ( n <= 10^6). Print longest palindromic substring of the string(multiple answaer possible)
//Hints: Two binary search needed. One for odd length palindrome and other for even length palindrome.
//complexity: O(nlongn)

#include<bits/stdc++.h>
using namespace std;
const int N = 1e6+7, p1 = 177, p2 = 277, mod1 = 1e9+7, mod2 = 1e9+9;
pair<int,int>pw[N],ipw[N];
int power(long long n, long long k, int mod) {
  int ans = 1 % mod; n %= mod; if (n < 0) n += mod;
  while (k) {
    if (k & 1) ans = (long long) ans * n % mod;
    n = (long long) n * n % mod;
    k >>= 1;
  }
  return ans;
}

void power_cal(){
    pw[0] = {1,1};
    for(int i = 1; i < N; i++){
        pw[i].first = 1LL*pw[i-1].first*p1 % mod1;;
        pw[i].second = 1LL*pw[i-1].second * p2 % mod2;
    }
    int inv1 = power(p1,mod1-2,mod1);
    int inv2 = power(p2,mod2-2,mod2);
    ipw[0] = {1,1};
    for(int i = 1; i < N; i++){
        ipw[i].first = 1LL*ipw[i-1].first * inv1 % mod1;
        ipw[i].second = 1LL*ipw[i-1].second * inv2 % mod2;
    }
}
struct Hashing{
pair<int,int>prex[N];

void build(string s){
    int n = s.length();
    for(int i = 0; i < n; i++){
        prex[i].first = 1LL*s[i]*pw[i].first % mod1;
        prex[i].second = 1LL*s[i]*pw[i].second % mod2;
        if(i>0){
            prex[i].first = (prex[i].first + prex[i-1].first) % mod1;
            prex[i].second = (prex[i].second + prex[i-1].second ) % mod2;
        }
    }
    }

    pair<int,int> get_hash(int l,int r){
    pair<int,int>ans;
    ans.first = prex[r].first;
    ans.second = prex[r].second;
    if(l>0){
        ans.first = (ans.first - prex[l-1].first + mod1) % mod1;
        ans.second = (ans.second - prex[l-1].second + mod2) % mod2;
    }
    ans.first = 1LL*ans.first * ipw[l].first % mod1;
    ans.second = 1LL*ans.second * ipw[l].second % mod2;
    return ans;
}
};
Hashing hs,revHash;
int n;
inline bool ispossible(int i,int j){
    if(hs.get_hash(i,j) == revHash.get_hash(n-j-1,n-i-1)) return true;
    return false;
}

int main(){
     ios::sync_with_stdio(false);cin.tie(0);
#ifndef ONLINE_JUDGE
freopen("input.txt","r",stdin); 
freopen("output.txt","w",stdout); 
#endif
     power_cal();
     string s;
     cin >> s;
     n = s.size();
     string r = s;
     reverse(r.begin(),r.end());
     
     hs.build(s);
     revHash.build(r);
     int ans  = 0;
     for(int i = 0; i < n; i++){
        int l = 0, r = min(i,n-i-1);
        while(l <= r){
            int mid = (l+r)/2;
            if(ispossible(i-mid,i+mid)){
                ans = max(ans,mid*2+1);
                l = mid + 1;

            }
            else r = mid - 1;
        }
     }
     int ans2 = 0;
     for(int i = 1;i < n ; i++){
        if(s[i] != s[i-1])continue;
        int l = 0,r = min(i-1,n-i-1);
        while(l <= r){
            int mid = (l+r)/2;
            if(ispossible(i-mid-1,i+mid)){
                ans2 = max(ans2,2*mid+2);
                l = mid + 1;
                //cout << mid << endl;

            }
            else r = mid - 1;
        }
     }
    ans = max(ans,ans2);
    for(int i = 0; i + ans - 1 < n; i++){
        if(ispossible(i,i+ans-1)){
            cout << s.substr(i,ans) << '\n';return 0;
        }
    }
    
    return 0;
}
