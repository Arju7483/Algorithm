//Given a string,laxicographically sort the all cyclic rotation of the string.
#include<bits/stdc++.h>
using namespace std;
#define ll long long
const int N = 2e5+7, p1 = 177, p2 = 277, mod1 = 1e9+7, mod2 = 1e9+9;
pair<int,int>pw[N],ipw[N],prex[N];
int power(long long n, long long k, int mod) {
  int ans = 1 % mod; n %= mod; if (n < 0) n += mod;
  while (k) {
    if (k & 1) ans = (long long) ans * n % mod;
    n = (long long) n * n % mod;
    k >>= 1;
  }
  return ans;
}

void power_cal(){
    pw[0] = {1,1};
    for(int i = 1; i < N; i++){
        pw[i].first = 1LL*pw[i-1].first*p1 % mod1;;
        pw[i].second = 1LL*pw[i-1].second * p2 % mod2;
    }
    int inv1 = power(p1,mod1-2,mod1);
    int inv2 = power(p2,mod2-2,mod2);
    ipw[0] = {1,1};
    for(int i = 1; i < N; i++){
        ipw[i].first = 1LL*ipw[i-1].first * inv1 % mod1;
        ipw[i].second = 1LL*ipw[i-1].second * inv2 % mod2;
    }
}
void build(string s){
    int n = s.length();
    for(int i = 0; i < n; i++){
        prex[i].first = 1LL*s[i]*pw[i].first % mod1;
        prex[i].second = 1LL*s[i]*pw[i].second % mod2;
        if(i>0){
            prex[i].first = (prex[i].first + prex[i-1].first) % mod1;
            prex[i].second = (prex[i].second + prex[i-1].second ) % mod2;
        }
    }
}
pair<int,int> get_hash(int l,int r){
    pair<int,int>ans;
    ans.first = prex[r].first;
    ans.second = prex[r].second;
    if(l>0){
        ans.first = (ans.first - prex[l-1].first + mod1) % mod1;
        ans.second = (ans.second - prex[l-1].second + mod2) % mod2;
    }
    ans.first = 1LL*ans.first * ipw[l].first % mod1;
    ans.second = 1LL*ans.second * ipw[l].second % mod2;
    return ans;
}

int LCP(int l,int r,int x,int y){
    int low = 1,hi = min(r-l+1,y-x+1),ans = 0;
    while(low <= hi){
        int mid = (low+hi)/2;
        if(get_hash(l,l+mid-1) == get_hash(x,x+mid-1)){
            ans = mid;
            low = mid+1;
        }
        else hi = mid-1;
    }
    return ans;
}
/*
0 = equal
-1 = first one is smaller
1 = first one is larger
*/
string s;
int Laxicographically_smallest(int i, int j, int x, int y) { // O(log n)
  int common_len = LCP(i, j, x, y);
  int len1 = j - i + 1, len2 = y - x + 1;
  if (len1 == len2 and common_len == len1) return 0; //equal
  else if (common_len == len1) return -1;
  else if (common_len == len2) return 1;
  else return (s[i + common_len] < s[x + common_len] ? -1 : 1);
}
int n;
bool cmp(int i,int j){
     int x = Laxicographically_smallest(i,i+n-1,j,j+n-1);
     if(x == -1) return true;
     else return false;
}
int main(){
     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#ifndef ONLINE_JUDGE
freopen("input.txt","r",stdin); 
freopen("output.txt","w",stdout); 
#endif
     power_cal();
     cin >> s;
     n = s.length();
     s += s;
     build(s);
     vector<int>ar;
     for(int i = 0; i < n; i++) ar.push_back(i);
     sort(ar.begin(),ar.end(),cmp);
     for(int i = 0; i < n; i++) cout << ar[i] + 1 << " "; //starting point of each rotation

 return 0;
}
