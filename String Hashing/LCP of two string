//Given a string and some query,in each query given two substring,find the Longest Common Prefix (LCP) of two substring.
//Alternative problem is: Given tow string,find lcp of two string
#include<bits/stdc++.h>
using namespace std;
#define ll long long
const int N = 1e5+7,p1 = 177,p2 = 277,mod1 = 1e9+7,mod2 = 1e9+9;
int power(long long n, long long k, int mod) {
  int ans = 1 % mod; n %= mod; if (n < 0) n += mod;
  while (k) {
    if (k & 1) ans = (long long) ans * n % mod;
    n = (long long) n * n % mod;
    k >>= 1;
  }
  return ans;
}

pair<int,int>pw[N],inv[N],prex[N];
void power_cal(){
     pw[0] = {1,1};
     for(int i = 1; i < N; i++){
          pw[i].first = 1LL*pw[i-1].first * p1 % mod1;
          pw[i].second = 1LL*pw[i-1].second * p2 % mod2;
     }
     inv[0] = {1,1};
     int inv1 = power(p1,mod1-2,mod1);
     int inv2 = power(p2,mod2-2,mod2);
     for(int i = 1; i < N; i++){
          inv[i].first = 1LL*inv[i-1].first * inv1 % mod1;
          inv[i].second = 1LL*inv[i-1].second * inv2 % mod2;
     }
}
void pre_cal(string s){
     int n = s.length();
     for(int i = 0; i < n; i++){
          prex[i].first = 1LL*s[i]*pw[i].first % mod1;
          prex[i].second = 1LL*s[i]*pw[i].second % mod2;
          if(i>0){
               prex[i].first = (prex[i-1].first + prex[i].first) % mod1;
               prex[i].second = (prex[i-1].second + prex[i].second) % mod2;
          }
     }

}
pair<int,int> Get_hash(int l,int r){
     l--;r--;
     pair<int,int>ans;
     ans.first = prex[r].first;
     ans.second = prex[r].second;
     if(l>0){
          ans.first = (ans.first - prex[l-1].first+mod1) % mod1;
          ans.second = (ans.second - prex[l-1].second + mod2) % mod2;
          ans.first = (1LL*ans.first * inv[l].first)%mod1;
          ans.second = (1LL*ans.second * inv[l].second) % mod2;
     }
     return ans;
}
bool ispossible(int x,int y,int l,int r,int mid){
     return Get_hash(x,x+mid-1) == Get_hash(l,l+mid-1);
}
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);cout.tie(0);
  #ifndef ONLINE_JUDGE
freopen("input.txt","r",stdin); 
freopen("output.txt","w",stdout); 
#endif
power_cal();
string s; cin >> s;
pre_cal(s);
int q; cin >> q;
while(q--){
     int x,y,l,r;
     cin >> x >> y >> l >> r;
     int ans = 0 , low = 1,hi = min(y-x+1,r-l+1);
     while(low <= hi){
          int mid = (low+hi)>>1;
          if(ispossible(x,y,l,r,mid)){
               low = mid + 1;
               ans = mid;
          }
          else hi = mid - 1;
     }
     cout << ans << endl;
}
}
